import { type NextPage } from "next";
import Head from "next/head";
import {FC, useState, useRef, ChangeEvent } from "react";
import { ReactMarkdown} from "react-markdown/lib/react-markdown";
import { ReactMarkdownProps } from "react-markdown/lib/ast-to-react";
import { promptOptions } from "lib/openai";

interface SelectProps {
    title: string
    value: number
    options: string[]
    onChange: (value: number) => void
}

const SettingSelection: FC<SelectProps> = ({title, value, options, onChange }) => {
    const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {
        onChange(Number(e.target.value));
    };
  
    return (
        <div className="flex flex-col">
            <span className="font-bold text-slate-600"> {title} </span>
            <select
            value={value}
            onChange={handleChange}
            className="select select-sm max-w-xs w-48"
            >
                {options.map((label, index) => (
                <option key={index} value={index}>
                    {label}
                </option>
                ))}
            </select>

        </div>
      
    );
  }

const mdRenderers = {
  h1: ({node, ...props}: ReactMarkdownProps) => <h1 className={"text-2xl font-bold text-center text-slate-600"} {...props} />,
  h2: ({node, ...props}: ReactMarkdownProps) => <h1 className={"text-lg font-bold text-slate-600"} {...props} />,
}

const CreateStory: NextPage = () => {
  const [text, setText] = useState("");
  const [storyType, setStoryType] = useState(0);
  const [readerAge, setReaderAge] = useState(5);
  const [story, setStory] = useState("");
  const [failedStory, setFailedStory] = useState(false);
  const storyRef = useRef<HTMLDivElement>(null)

  const scrollToStory = () => {
    if (storyRef.current) {
        storyRef.current.scrollIntoView({behavior: "smooth"});
    }
  }

  const renderStory = async (e: any) => {
    e.preventDefault();
    setStory("");

    const response = await fetch("api/story", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        text,
        storyType,
        readerAge
      }),
    });
    if (response.status != 200) {
      setFailedStory(true);
      return
    }
    setFailedStory(false);

    const data = response.body;

    if (!data) {
      return;
    }

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;
    scrollToStory()
    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const content = decoder.decode(value);
      setStory((prev) => prev + content);
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen min-w-full flex-col items-center justify-center gap-5 bg-gradient-to-b from-[#ffffff] to-[#f3f3f3]">
        <div className="h-8 flex"> </div>
        <div className="flex-col lg:flex-row flex w-full items-center p-6 gap-5">
          <div className="w-full flex flex-col flex-1 gap-5 lg:min-h-screen">
            <div className="flex flex-col items-center justify-center gap-8">
              <h1 className="text-4xl font-extrabold tracking-tight text-slate-600">
                Skapa
              </h1>
              <textarea
                className="textarea textarea-lg h-48 focus:outline-none w-full border-4 rounded-lg border-gray-200"
                placeholder="Till exempel, 'En get som lever på en båt'"
                cols={30}
                rows={10}
                value={text}
                onChange={(e) => setText(e.target.value)}
              />
              <button className="btn" onClick={(e) => renderStory(e)}>
                {" "}
                Generera
              </button>
            </div>
          <div className="items-left container flex h-60 w-10/12 flex-col gap-4">
            <h2 className="text-2xl font-extrabold text-slate-600">
              {" "}
              Inställningar{" "}
            </h2>
            <SettingSelection title="Berättelsetyp" value={storyType} onChange={setStoryType} options={promptOptions.storyTypes.map((item) => item.type)}/>
            <SettingSelection title="Läsarens ålder" value={readerAge} onChange={setReaderAge} options={promptOptions.readerAges}/>
            <div className="">
              {failedStory && (
                <p className="font-bold text-red-800">
                  {" "}
                  Misslyckades - Försök igen om ett par minuter.
                </p>
              )}
            </div>
          </div>
          </div>
          <div  ref={storyRef} className="flex flex-1 flex-col gap-8 items-center justify-center w-full lg:w-48 container h-screen">
              <h2 className="text-4xl font-extrabold text-slate-600">Story</h2>
              <div  className="mb-4 flex-grow bg-white border-4 p-5 w-full rounded-lg overflow-auto">
                  {story == "" && <p className="opacity-50 text-lg"> Här skapas din personliga story... </p> }
                  <ReactMarkdown className="flex flex-col gap-5 text-slate-600" components={mdRenderers} children={story}/>
              </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default CreateStory;
